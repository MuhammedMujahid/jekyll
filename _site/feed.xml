<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-12T23:26:53-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Muhammed Mujahid</title><subtitle>Front End Web Developer</subtitle><entry><title type="html">React.js Notes</title><link href="http://localhost:4000/react/" rel="alternate" type="text/html" title="React.js Notes" /><published>2018-05-29T00:00:00-04:00</published><updated>2018-05-29T00:00:00-04:00</updated><id>http://localhost:4000/react</id><content type="html" xml:base="http://localhost:4000/react/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Components in react typically have a javascript class with a state and a render component&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The output of the render method is a react element that maps to DOM element as a virtual DOM&lt;/li&gt;
  &lt;li&gt;React reacts to the state change and updates the DOM, (Keeps virtual DOM and real DOM in sync)&lt;/li&gt;
  &lt;li&gt;Create-react-app downloads babel, webpack&lt;/li&gt;
  &lt;li&gt;Virtual DOM is a lightweight in memory representation of the DOM&lt;/li&gt;
  &lt;li&gt;ES6&lt;/li&gt;
  &lt;li&gt;Var scoped to function&lt;/li&gt;
  &lt;li&gt;Let scoped to the block&lt;/li&gt;
  &lt;li&gt;Only use let when you want to reassign a variable&lt;/li&gt;
  &lt;li&gt;Else always use the const variable&lt;/li&gt;
  &lt;li&gt;When a function is inside of an object, we call it a method&lt;/li&gt;
  &lt;li&gt;Javascript: walk: function() {} es6: walk() {}&lt;/li&gt;
  &lt;li&gt;Javascript: person.name es6: person[name]&lt;/li&gt;
  &lt;li&gt;You use bracket notation when you don’t know which value you want to access ahead of time&lt;/li&gt;
  &lt;li&gt;“This” always returns reference to the current object&lt;/li&gt;
  &lt;li&gt;Javascript: function(number){ return n*n} es6: number =&amp;gt; n*n&lt;/li&gt;
  &lt;li&gt;Map method is used to render a list&lt;/li&gt;
  &lt;li&gt;When making a constructor in a extending class, put the “super()” keyword inside body of constructor&lt;/li&gt;
  &lt;li&gt;Separate modules are private by default, therefore putting “export” keyword at the start of a class name * will allow others modules to have access to them&lt;/li&gt;
  &lt;li&gt;Import {person} from ‘./relatedpath’&lt;/li&gt;
  &lt;li&gt;Named exports are any specific objects you want to export from a class&lt;/li&gt;
  &lt;li&gt;Default exports are there when you want to specify a default object to export&lt;/li&gt;
  &lt;li&gt;Default -&amp;gt; import … from ‘’;&lt;/li&gt;
  &lt;li&gt;Named -&amp;gt; import {…} from ‘’;&lt;/li&gt;
  &lt;li&gt;It is possible for a module to have both a default and named export&lt;/li&gt;
  &lt;li&gt;Import Teacher, { promote } from “./teacher”;&lt;/li&gt;
  &lt;li&gt;Installing BOOTSTRAP&lt;/li&gt;
  &lt;li&gt;Npm i bootstrap@4.1.1&lt;/li&gt;
  &lt;li&gt;Import in index.js “import ‘bootstrap/dist/css/bootstrap.css”&lt;/li&gt;
  &lt;li&gt;Components&lt;/li&gt;
  &lt;li&gt;Components with .jsx extension have better code completion&lt;/li&gt;
  &lt;li&gt;Imrc -&amp;gt; import react component&lt;/li&gt;
  &lt;li&gt;Cc -&amp;gt; create class&lt;/li&gt;
  &lt;li&gt;You can apply styles through jsx expressions&lt;/li&gt;
  &lt;li&gt;To render lists, use the .map method and use keys to uniquely identify elements&lt;/li&gt;
  &lt;li&gt;When changing a state variable, you must use .setState to update the state afterwards&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;this.setState({ movies });&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When passing event arguments use an arrow function&lt;/li&gt;
  &lt;li&gt;onClick{ () =&amp;gt; this.handleIncrement(Product)}&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MAP FUCKING FUNCTION to render list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;{this.state.tags.map(tag =&amp;gt; &lt;li&gt;{tag}&lt;/li&gt;)}&lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The filter() method creates a new array with all elements that pass the test implemented by the provided * function.&lt;/li&gt;
  &lt;li&gt;const result = words.filter(word =&amp;gt; word.length &amp;gt; 6);&lt;/li&gt;
  &lt;li&gt;Return should only return one jsx element, if it returns more than one, than you wrap it in &lt;React.Fragment&gt;&lt;/React.Fragment&gt;&lt;/li&gt;
  &lt;li&gt;Input to component tag are called props&lt;/li&gt;
  &lt;li&gt;Attributes should be only be modified by whom ever owns it&lt;/li&gt;
  &lt;li&gt;Controlled components don’t have their own state&lt;/li&gt;
  &lt;li&gt;Stateless functional components get all their data from props, in this case you can use stateless * functional components that return a function as a react element&lt;/li&gt;
  &lt;li&gt;To use type checking, install prop-types (npm i prop-types@15.6.2)&lt;/li&gt;
  &lt;li&gt;componentDidMount initializes when the component is rendered&lt;/li&gt;
  &lt;li&gt;Colon sign is used to define an object property while the equal sign is used to assign a value to a * variable&lt;/li&gt;
  &lt;li&gt;To use routing type ‘npm i react-router-dom’ in terminal&lt;/li&gt;
  &lt;li&gt;To start and use a react app use ‘npm i’ followed by ‘npm start’&lt;/li&gt;
  &lt;li&gt;
    &lt;Route /&gt;
    &lt;p&gt;tag takes two parameters 1: path=”” and 2: component={}
&amp;lt;Route path=”/” exact component={Home} /&amp;gt; use exact keyword to have tag render only when path is exactly the one defined&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;An alternative to using exact keyword is using &lt;Switch&gt; tag to surround different routes&lt;/Switch&gt;&lt;/li&gt;
  &lt;li&gt;When using the switch tag, order routes from most specific to least specific&lt;/li&gt;
  &lt;li&gt;Use &lt;link /&gt; tag to surround routing tags, so that they behave like a single page application and don’t reload entire page, instead they will just refresh that particular page component&lt;/li&gt;
  &lt;li&gt;
    &lt;link /&gt;
    &lt;p&gt;tab doesn’t have attribute called href, instead it uses “to”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;link /&gt;
    &lt;p&gt;prevents additional https requests to be sent to the server&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Use redirect from react-router-dom to redirect user if he enters the wrong url&lt;/li&gt;
  &lt;li&gt;Routing Steps:&lt;/li&gt;
  &lt;li&gt;Npm i react-router-dom&lt;/li&gt;
  &lt;li&gt;Wrap &lt;app&gt;&lt;/app&gt; tag in index.js with &lt;BrowserRouter&gt; tag&lt;/BrowserRouter&gt;&lt;/li&gt;
  &lt;li&gt;With react, you can use the libraries you prefer to send http requests&lt;/li&gt;
  &lt;li&gt;Componentdidmount is where you call service to load data&lt;/li&gt;
  &lt;li&gt;A promise is an object that holds the result of an asychronous operation&lt;/li&gt;
  &lt;li&gt;Axios http client, sends http request to get data&lt;/li&gt;
  &lt;li&gt;Changing the UI before calling a http request will give the delusion of a faster interface&lt;/li&gt;
  &lt;li&gt;componentDidMount() {
axios.get(&lt;code class=&quot;highlighter-rouge&quot;&gt;https://jsonplaceholder.typicode.com/users&lt;/code&gt;)
.then(res =&amp;gt; {
const persons = res.data;
this.setState({ persons });
})
}&lt;/li&gt;
  &lt;li&gt;Services are used to talk to api end points&lt;/li&gt;
  &lt;li&gt;To login a user we send a post request to the authentication endpoint and in return we get a json web * token which is like a authentication card&lt;/li&gt;
  &lt;li&gt;React-Native&lt;/li&gt;
  &lt;li&gt;Advantages is it saves time and cost&lt;/li&gt;
  &lt;li&gt;Native cross platform applicaitons&lt;/li&gt;
  &lt;li&gt;We can have seperate pages to have one load on IOS and one load on android&lt;/li&gt;
  &lt;li&gt;For example tabbarIOS is only available on IOS&lt;/li&gt;
  &lt;li&gt;While ToolbarAndroid is only available on android&lt;/li&gt;
  &lt;li&gt;Deploying via github pages&lt;/li&gt;
  &lt;li&gt;Npm i gh-pages&lt;/li&gt;
  &lt;li&gt;Navigate to package.json&lt;/li&gt;
  &lt;li&gt;Add “homepage”: “https://muhammedmujahid.github.io/Shopping-Cart-React-App”,&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“scripts”: {……..
…..
Add “deploy”: “gh-pages -d build” inside scripts
Npm run build
Npm run deploy
FIN.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Expo init to make a react native project&lt;/li&gt;
  &lt;li&gt;React native doesn’t work with regular DOM elements&lt;/li&gt;
  &lt;li&gt;Instead you use Text and View that are imported from react-native&lt;/li&gt;
  &lt;li&gt;View is equivalent to div&lt;/li&gt;
  &lt;li&gt;And text is equivalent to paragraph&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- &lt;a href=&quot;http://localhost:4000/images/halve-home-image.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/halve-home-image.png&quot; alt=&quot;Home Page of Halve&quot;&gt;&lt;/a&gt;

&lt;center&gt;&lt;b&gt;Halve&lt;/b&gt; is a stylish, two-column jekyll theme.&lt;/center&gt;&lt;br&gt; --&gt;

&lt;!-- &lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=TaylanTatli&amp;repo=Halve&amp;type=star&amp;count=true&amp;size=large&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;160px&quot; height=&quot;30px&quot;&gt;&lt;/iframe&gt;
       --&gt;
&lt;!-- ## Installation and Quick Usage
* Fork the [Halve repo](https://github.com/TaylanTatli/Halve/fork)
* Edit `_config.yml` file.
* Edit `index.md`.
* Edit `_data/projects.yaml`
* Add a logo with a small one to `images` folder. (eg. `logo.png`, `logo-small.png`)
* Remove sample posts from `_posts` folder and add yours.
* Remove/Change sample images from `images` folder.
* Change repo name to `YourUserName.github.io`

That's all.

If you want to make a **Project Page**, you have to use `gh-pages` branch. For **Personal Page**; `master` branch. More info [here](https://help.github.com/articles/about-github-pages-and-jekyll/#jekylls-build-process).

## Preview








&lt;figure class=&quot;third&quot;&gt;
    
    &lt;a href=&quot;http://localhost:4000/images/halve-home-image.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/halve-home-image.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
    
    &lt;a href=&quot;http://localhost:4000/images/post-image-halve-1.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/post-image-halve-1.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
    
    &lt;a href=&quot;http://localhost:4000/images/post-image-halve-2.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/post-image-halve-2.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Screenshots of Halve Theme&lt;/figcaption&gt;
&lt;/figure&gt;









&lt;figure class=&quot;third&quot;&gt;
    
    &lt;a href=&quot;http://localhost:4000/images/post-image-halve-3.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/post-image-halve-3.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
    
    &lt;a href=&quot;http://localhost:4000/images/post-image-halve-6.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/post-image-halve-6.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
    
    &lt;a href=&quot;http://localhost:4000/images/post-image-halve-4.png&quot;&gt;&lt;img src=&quot;http://localhost:4000/images/post-image-halve-4.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Mobile view of Halve Theme&lt;/figcaption&gt;
&lt;/figure&gt;


See a [live version of Halve](http://taylantatli.github.io/Halve) hosted on GitHub.

## Site Setup

A quick checklist of the files you’ll want to edit to get up and running.

### Site Wide Configuration

`_config.yml` is your friend. Open it up and personalize it. Most variables are self explanatory but here's an explanation of each if needed:

#### title

The title of your site... shocker!

Example `title: My Awesome Site`

#### description

The description to use for meta tags and homepage.

#### url

Used to generate absolute urls in `sitemap.xml`, `feed.xml`, and for generating canonical URLs in `&lt;head&gt;`. When developing locally either comment this out or use something like `http://localhost:4000` so all assets load properly. _Don't include a trailing `/`_.

Examples:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/Halve&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:4000&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;//cooldude.github.io&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


#### logo

Your site's logo. It will be shown on homepage. Also used for twitter meta tags.

#### background

Here we will set images for left block. Example:

```
background:
  homepage: images/home.png
  post-list: images/unsplash-image-10.jpg
  default-post: images/unsplash-gallery-image-3.jpg
```

&lt;dl&gt;
  &lt;dt&gt;homepage&lt;/dt&gt;
  &lt;dd&gt;Is for homepage background image.&lt;/dd&gt;
  &lt;dt&gt;post-list&lt;/dt&gt;
  &lt;dd&gt;Is for posts list page background image.&lt;/dd&gt;
  &lt;dt&gt;default-post&lt;/dt&gt;
  &lt;dd&gt;Is for posts' default background image. It will be shown for every posts that don't specify any image from post's YAML front matter.&lt;/dd&gt;
&lt;/dl&gt;

---

### Projects Overlay

To set what image links appear in the overlay menu edit `_data/projects.yaml`. Use the following format to set the URL, title, image and project status for as many links as you'd like. If you set `completed` to `false` like `completed: false`, it won't be clickable until you set it true like `completed: true`


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Moon Jekyll Theme&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/Moon&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://cloud.githubusercontent.com/assets/754514/14509720/61c61058-01d6-11e6-93ab-0918515ecd56.png&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ramme Jekyll Theme&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/Ramme&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://raw.githubusercontent.com/TaylanTatli/Ramme/master/assets/img/screenshot-post.png&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Daisy Pelican Theme&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/Daisy-Pelican-Theme/&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://raw.githubusercontent.com/TaylanTatli/Daisy-Pelican-Theme/master/Preview-1.png&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Block Icon Theme&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/TaylanTatli/Block-Icon-Theme&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://raw.githubusercontent.com/TaylanTatli/Block-Icon-Theme/master/Preview.png&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Start Page&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/StartPage/&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://raw.githubusercontent.com/TaylanTatli/StartPage/master/preview.png&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


---

## Layouts and Content

Halve Theme use [Jekyll Compress](https://github.com/penibelst/jekyll-compress-html) to compress html output. But it can cause errors if you use &quot;linenos&quot; (line numbers). I suggest don't use line numbers for codes, because it won't look good with this theme, also i didn't give a proper style for them. If you insist to use line numbers, just remove `layout: compress` string from layouts. It will disable compressing.

### Images for Posts

You can set left block image per post. Just add `image: some link` to your post's front matter. If you don't set this, default post image will be used from `_config.yml`.

```
image: /assets/img/some-image.png
or
image: http://example.com/some-image.png
```

This also will be used for twitter card:

![Halve Twitter Card](http://localhost:4000/images/post-image-halve-5.png)

---

## Questions?

Found a bug or aren't quite sure how something works? By all means [file a GitHub Issue](https://github.com/TaylanTatli/Halve/issues/new). And if you make something cool with this theme feel free to let me know.

---

## License

This theme is free and open source software, distributed under the MIT License. So feel free to use this Jekyll theme on your site without linking back to me or including a disclaimer. --&gt;</content><author><name></name></author><category term="React" /><category term="Routing" /><category term="Pagination" /><category term="Stateless" /><summary type="html">cummulative notes</summary></entry></feed>